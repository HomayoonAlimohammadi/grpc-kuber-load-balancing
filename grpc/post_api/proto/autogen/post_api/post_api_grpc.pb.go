// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: post_api.proto

package post_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PostAPI_ShowPost_FullMethodName = "/PostAPI/ShowPost"
)

// PostAPIClient is the client API for PostAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostAPIClient interface {
	ShowPost(ctx context.Context, in *ShowPostRequest, opts ...grpc.CallOption) (*ShowPostResponse, error)
}

type postAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPostAPIClient(cc grpc.ClientConnInterface) PostAPIClient {
	return &postAPIClient{cc}
}

func (c *postAPIClient) ShowPost(ctx context.Context, in *ShowPostRequest, opts ...grpc.CallOption) (*ShowPostResponse, error) {
	out := new(ShowPostResponse)
	err := c.cc.Invoke(ctx, PostAPI_ShowPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostAPIServer is the server API for PostAPI service.
// All implementations must embed UnimplementedPostAPIServer
// for forward compatibility
type PostAPIServer interface {
	ShowPost(context.Context, *ShowPostRequest) (*ShowPostResponse, error)
	mustEmbedUnimplementedPostAPIServer()
}

// UnimplementedPostAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPostAPIServer struct {
}

func (UnimplementedPostAPIServer) ShowPost(context.Context, *ShowPostRequest) (*ShowPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPost not implemented")
}
func (UnimplementedPostAPIServer) mustEmbedUnimplementedPostAPIServer() {}

// UnsafePostAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostAPIServer will
// result in compilation errors.
type UnsafePostAPIServer interface {
	mustEmbedUnimplementedPostAPIServer()
}

func RegisterPostAPIServer(s grpc.ServiceRegistrar, srv PostAPIServer) {
	s.RegisterService(&PostAPI_ServiceDesc, srv)
}

func _PostAPI_ShowPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostAPIServer).ShowPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostAPI_ShowPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostAPIServer).ShowPost(ctx, req.(*ShowPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostAPI_ServiceDesc is the grpc.ServiceDesc for PostAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PostAPI",
	HandlerType: (*PostAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowPost",
			Handler:    _PostAPI_ShowPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post_api.proto",
}
